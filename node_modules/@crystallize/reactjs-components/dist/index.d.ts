import * as React from 'react';
import React__default, { FunctionComponent, HTMLAttributes, FC } from 'react';
import { RichTextContent, ImageVariant } from '@crystallize/js-api-client';
import * as react_jsx_runtime from 'react/jsx-runtime';

interface ImageProps {
    children?: FunctionComponent<any>;
    src?: string;
    url?: string;
    sizes?: string;
    altText?: string;
    alt?: string;
    fallbackAlt?: string;
    media?: string;
    style?: React__default.CSSProperties;
    className?: string;
    width?: number;
    height?: number;
    caption?: RichTextContent;
    captionPassed?: string;
    fallbackCaption?: string;
    variants?: ImageVariant[];
    loading?: 'eager' | 'lazy';
    _availableSizes?: number[];
    _availableFormats?: string[];
}

declare const Image: FunctionComponent<ImageProps>;

declare enum GridRenderingType {
    Table = "table",
    Div = "div",
    RowCol = "row-col",
    CSSGrid = "CSSGrid"
}
type GridDimensions = {
    rows: number;
    cols: number;
};
type GridCell = {
    layout: {
        rowspan: number;
        colspan: number;
        rowIndex: number;
        colIndex: number;
    };
    [key: string]: any;
};
type GridRow = {
    columns: GridCell[];
};
interface GridRendererProps {
    cellComponent: React__default.FunctionComponent<{
        cell: any;
        dimensions: GridDimensions;
        children?: FunctionComponent<any>;
    }>;
    type: GridRenderingType;
    grid: {
        rows: GridRow[];
    };
    style?: React__default.CSSProperties;
    children?: FunctionComponent<any>;
    styleForCell?: (cell: GridCell, styles: React__default.CSSProperties) => React__default.CSSProperties;
}
interface CSSGridProps {
    cellComponent: React__default.FunctionComponent<{
        cell: any;
        dimensions: GridDimensions;
        children?: FunctionComponent<any>;
    }>;
    cells: GridCell[];
    children?: FunctionComponent<any>;
    dimensions: GridDimensions;
    style?: React__default.CSSProperties;
    styleForCell?: (cell: GridCell, styles: React__default.CSSProperties) => React__default.CSSProperties;
}
interface TableGridProps {
    cellComponent: React__default.FunctionComponent<{
        cell: any;
        dimensions: GridDimensions;
    }>;
    grid: GridRow[];
    children?: FunctionComponent<any>;
    dimensions: GridDimensions;
    style?: React__default.CSSProperties;
    styleForCell?: (cell: GridCell, styles: React__default.CSSProperties) => React__default.CSSProperties;
}
interface RowColGridProps {
    cellComponent: React__default.FunctionComponent<{
        cell: any;
        dimensions: GridDimensions;
    }>;
    grid: GridRow[];
    children?: FunctionComponent<any>;
    dimensions: GridDimensions;
    style?: React__default.CSSProperties;
    styleForCell?: (cell: GridCell, styles: React__default.CSSProperties) => React__default.CSSProperties;
}

declare const GridRenderer: FunctionComponent<GridRendererProps>;

declare const CSSGrid: FunctionComponent<CSSGridProps>;

declare const Table: FunctionComponent<TableGridProps>;

declare const RowCol: FunctionComponent<RowColGridProps>;

declare const getGridDimensions: (rows: any[]) => GridDimensions;
declare function getPositionnableCellClassNames(cell: GridCell, { rows, cols }: GridDimensions): string;
declare function getPositionnablRowClassNames({ rowIndex }: {
    rowIndex: number;
}, { rows }: GridDimensions): string;

interface NodeMetadata {
    [key: string]: any;
}
interface NodeProps {
    kind?: string;
    type?: string;
    textContent?: string;
    children?: [NodeProps];
    metadata?: NodeMetadata;
}
type Override = (props: NodeProps) => JSX.Element;
interface Overrides {
    link?: Override;
    'unordered-list'?: Override;
    'ordered-list'?: Override;
    list?: Override;
    'list-item'?: Override;
    quote?: Override;
    paragraph?: Override;
    preformatted?: Override;
    code?: Override;
    underlined?: Override;
    strong?: Override;
    emphasized?: Override;
    div?: Override;
    span?: Override;
    'line-break'?: Override;
    heading1?: Override;
    heading2?: Override;
    heading3?: Override;
    deleted?: Override;
    subscripted?: Override;
    superscripted?: Override;
    'horizontal-line'?: Override;
    table?: Override;
    'table-row'?: Override;
    'table-cell'?: Override;
    'table-head-cell'?: Override;
}

declare const Renderers: Record<keyof Overrides, (props: NodeProps) => JSX.Element>;
interface Props {
    overrides?: Overrides | null;
    json?: NodeProps[] | NodeProps;
}
declare const OverridesContext: React.Context<Overrides | null>;
declare const NodeContent: (props: NodeProps) => react_jsx_runtime.JSX.Element | null;
declare function renderTextContent(text: String): react_jsx_runtime.JSX.Element;
declare const ContentTransformerNode: (props: NodeProps) => JSX.Element;
declare const ContentTransformer: ({ overrides, json }: Props) => react_jsx_runtime.JSX.Element | null;

interface VideoProps extends HTMLAttributes<HTMLDivElement> {
    playlists: string[];
    thumbnails?: ImageVariant[];
    thumbnailProps?: object;
    videoProps?: HTMLAttributes<HTMLVideoElement>;
    autoPlay?: boolean;
    loop?: boolean;
    muted?: boolean;
    controls?: boolean;
    poster?: string;
    playButtonText?: string;
}

declare global {
    interface navigator {
        connection: any;
    }
}
declare const Video: FC<VideoProps>;

export { CSSGrid, CSSGridProps, ContentTransformer, ContentTransformerNode, GridCell, GridDimensions, GridRenderer, GridRendererProps, GridRenderingType, GridRow, Image, ImageProps, NodeContent, NodeProps, Override, Overrides, OverridesContext, Props, Renderers, RowCol, RowColGridProps, Table, TableGridProps, Video, VideoProps, getGridDimensions, getPositionnablRowClassNames, getPositionnableCellClassNames, renderTextContent };
