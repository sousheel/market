import { ApiCaller, ClientInterface, VariablesType } from './client';
export type CrystallizePromise<T> = {
    key: string;
    caller: ApiCaller<T>;
    query: string;
    variables?: VariablesType;
};
export type MassCallClientBatch = {
    from: number;
    to: number;
};
export type QueuedApiCaller = (query: string, variables?: VariablesType) => string;
export type MassClientInterface = ClientInterface & {
    execute: () => Promise<any>;
    reset: () => void;
    hasFailed: () => boolean;
    failureCount: () => number;
    retry: () => Promise<any>;
    catalogueApi: ApiCaller<any>;
    searchApi: ApiCaller<any>;
    orderApi: ApiCaller<any>;
    subscriptionApi: ApiCaller<any>;
    pimApi: ApiCaller<any>;
    enqueue: {
        catalogueApi: QueuedApiCaller;
        searchApi: QueuedApiCaller;
        orderApi: QueuedApiCaller;
        subscriptionApi: QueuedApiCaller;
        pimApi: QueuedApiCaller;
    };
};
/**
 * Note: MassCallClient is experimental and may not work as expected.
 * Creates a mass call client based on an existing ClientInterface.
 *
 * @param client ClientInterface
 * @param options Object
 * @returns MassClientInterface
 */
export declare function createMassCallClient(client: ClientInterface, options: {
    initialSpawn?: number;
    maxSpawn?: number;
    onBatchDone?: (batch: MassCallClientBatch) => Promise<void>;
    beforeRequest?: (batch: MassCallClientBatch, promise: CrystallizePromise<any>) => Promise<CrystallizePromise<any> | void>;
    afterRequest?: (batch: MassCallClientBatch, promise: CrystallizePromise<any>, results: any) => Promise<void>;
    onFailure?: (batch: {
        from: number;
        to: number;
    }, exception: any, promise: CrystallizePromise<any>) => Promise<boolean>;
}): MassClientInterface;
