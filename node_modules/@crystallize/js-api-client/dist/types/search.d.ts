import { EnumType } from 'json-to-graphql-query';
import { z } from 'zod';
export declare const catalogueSearchFilter: z.ZodObject<{
    searchTerm: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodEffects<z.ZodEnum<["PRODUCT", "FOLDER", "DOCUMENT"]>, EnumType, "PRODUCT" | "FOLDER" | "DOCUMENT">>;
    include: z.ZodOptional<z.ZodObject<{
        itemIds: z.ZodOptional<z.ZodString>;
        productVariantIds: z.ZodOptional<z.ZodString>;
        skus: z.ZodOptional<z.ZodString>;
        shapeIdentifiers: z.ZodOptional<z.ZodString>;
        paths: z.ZodOptional<z.ZodString>;
        topicsPaths: z.ZodOptional<z.ZodObject<{
            logicalOperator: z.ZodEffects<z.ZodEnum<["AND", "OR"]>, EnumType, "AND" | "OR">;
            sections: z.ZodArray<z.ZodObject<{
                logicalOperator: z.ZodEffects<z.ZodEnum<["AND", "OR"]>, EnumType, "AND" | "OR">;
                fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>;
            }, "strict", z.ZodTypeAny, {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }, {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            logicalOperator: EnumType;
            sections: {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        }, {
            logicalOperator: "AND" | "OR";
            sections: {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        }>>;
    }, "strict", z.ZodTypeAny, {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: EnumType;
            sections: {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    }, {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: "AND" | "OR";
            sections: {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    }>>;
    exclude: z.ZodOptional<z.ZodObject<{
        itemIds: z.ZodOptional<z.ZodString>;
        productVariantIds: z.ZodOptional<z.ZodString>;
        skus: z.ZodOptional<z.ZodString>;
        shapeIdentifiers: z.ZodOptional<z.ZodString>;
        paths: z.ZodOptional<z.ZodString>;
        topicsPaths: z.ZodOptional<z.ZodObject<{
            logicalOperator: z.ZodEffects<z.ZodEnum<["AND", "OR"]>, EnumType, "AND" | "OR">;
            sections: z.ZodArray<z.ZodObject<{
                logicalOperator: z.ZodEffects<z.ZodEnum<["AND", "OR"]>, EnumType, "AND" | "OR">;
                fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>;
            }, "strict", z.ZodTypeAny, {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }, {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            logicalOperator: EnumType;
            sections: {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        }, {
            logicalOperator: "AND" | "OR";
            sections: {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        }>>;
    }, "strict", z.ZodTypeAny, {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: EnumType;
            sections: {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    }, {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: "AND" | "OR";
            sections: {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    }>>;
    priceVariant: z.ZodOptional<z.ZodString>;
    stockLocation: z.ZodOptional<z.ZodString>;
    productVariants: z.ZodOptional<z.ZodObject<{
        isDefault: z.ZodOptional<z.ZodBoolean>;
        priceRange: z.ZodOptional<z.ZodObject<{
            min: z.ZodNumber;
            max: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            min: number;
            max: number;
        }, {
            min: number;
            max: number;
        }>>;
        stock: z.ZodOptional<z.ZodObject<{
            min: z.ZodNumber;
            location: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            min: number;
            location?: string | undefined;
        }, {
            min: number;
            location?: string | undefined;
        }>>;
        stockLocations: z.ZodOptional<z.ZodObject<{
            min: z.ZodNumber;
            location: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            logicalOperator: z.ZodEnum<["OR"]>;
        }, "strict", z.ZodTypeAny, {
            logicalOperator: "OR";
            min: number;
            location?: string[] | undefined;
        }, {
            logicalOperator: "OR";
            min: number;
            location?: string[] | undefined;
        }>>;
        attributes: z.ZodOptional<z.ZodObject<{
            attribute: z.ZodString;
            value: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            value: string;
            attribute: string;
        }, {
            value: string;
            attribute: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isDefault?: boolean | undefined;
        priceRange?: {
            min: number;
            max: number;
        } | undefined;
        stock?: {
            min: number;
            location?: string | undefined;
        } | undefined;
        stockLocations?: {
            logicalOperator: "OR";
            min: number;
            location?: string[] | undefined;
        } | undefined;
        attributes?: {
            value: string;
            attribute: string;
        } | undefined;
    }, {
        isDefault?: boolean | undefined;
        priceRange?: {
            min: number;
            max: number;
        } | undefined;
        stock?: {
            min: number;
            location?: string | undefined;
        } | undefined;
        stockLocations?: {
            logicalOperator: "OR";
            min: number;
            location?: string[] | undefined;
        } | undefined;
        attributes?: {
            value: string;
            attribute: string;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    searchTerm?: string | undefined;
    type?: EnumType | undefined;
    include?: {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: EnumType;
            sections: {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    } | undefined;
    exclude?: {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: EnumType;
            sections: {
                logicalOperator: EnumType;
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    } | undefined;
    priceVariant?: string | undefined;
    stockLocation?: string | undefined;
    productVariants?: {
        isDefault?: boolean | undefined;
        priceRange?: {
            min: number;
            max: number;
        } | undefined;
        stock?: {
            min: number;
            location?: string | undefined;
        } | undefined;
        stockLocations?: {
            logicalOperator: "OR";
            min: number;
            location?: string[] | undefined;
        } | undefined;
        attributes?: {
            value: string;
            attribute: string;
        } | undefined;
    } | undefined;
}, {
    searchTerm?: string | undefined;
    type?: "PRODUCT" | "FOLDER" | "DOCUMENT" | undefined;
    include?: {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: "AND" | "OR";
            sections: {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    } | undefined;
    exclude?: {
        itemIds?: string | undefined;
        productVariantIds?: string | undefined;
        skus?: string | undefined;
        shapeIdentifiers?: string | undefined;
        paths?: string | undefined;
        topicsPaths?: {
            logicalOperator: "AND" | "OR";
            sections: {
                logicalOperator: "AND" | "OR";
                fields?: {
                    value: string;
                }[] | undefined;
            }[];
        } | undefined;
    } | undefined;
    priceVariant?: string | undefined;
    stockLocation?: string | undefined;
    productVariants?: {
        isDefault?: boolean | undefined;
        priceRange?: {
            min: number;
            max: number;
        } | undefined;
        stock?: {
            min: number;
            location?: string | undefined;
        } | undefined;
        stockLocations?: {
            logicalOperator: "OR";
            min: number;
            location?: string[] | undefined;
        } | undefined;
        attributes?: {
            value: string;
            attribute: string;
        } | undefined;
    } | undefined;
}>;
export type CatalogueSearchFilter = z.infer<typeof catalogueSearchFilter>;
export declare const catalogueSearchOrderBy: z.ZodObject<{
    field: z.ZodEffects<z.ZodEnum<["ITEM_NAME", "PRICE", "STOCK", "CREATED_AT"]>, EnumType, "ITEM_NAME" | "PRICE" | "STOCK" | "CREATED_AT">;
    direction: z.ZodEffects<z.ZodEnum<["ASC", "DESC"]>, EnumType, "ASC" | "DESC">;
}, "strict", z.ZodTypeAny, {
    field: EnumType;
    direction: EnumType;
}, {
    field: "ITEM_NAME" | "PRICE" | "STOCK" | "CREATED_AT";
    direction: "ASC" | "DESC";
}>;
export type CatalogueSearchOrderBy = z.infer<typeof catalogueSearchOrderBy>;
